// Code generated by protoc-gen-go.
// source: contracts/name_service/name_service.proto
// DO NOT EDIT!

/*
Package name_service is a generated protocol buffer package.

It is generated from these files:
	contracts/name_service/name_service.proto

It has these top-level messages:
	EmptyReq
	GetNameResp
	OnNameSetReq
	SetNameReq
	TransactOpts
	TransactionResp
*/
package name_service

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EmptyReq struct {
}

func (m *EmptyReq) Reset()                    { *m = EmptyReq{} }
func (m *EmptyReq) String() string            { return proto.CompactTextString(m) }
func (*EmptyReq) ProtoMessage()               {}
func (*EmptyReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetNameResp struct {
	Arg string `protobuf:"bytes,1,opt,name=arg" json:"arg,omitempty"`
}

func (m *GetNameResp) Reset()                    { *m = GetNameResp{} }
func (m *GetNameResp) String() string            { return proto.CompactTextString(m) }
func (*GetNameResp) ProtoMessage()               {}
func (*GetNameResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetNameResp) GetArg() string {
	if m != nil {
		return m.Arg
	}
	return ""
}

type OnNameSetReq struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *OnNameSetReq) Reset()                    { *m = OnNameSetReq{} }
func (m *OnNameSetReq) String() string            { return proto.CompactTextString(m) }
func (*OnNameSetReq) ProtoMessage()               {}
func (*OnNameSetReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *OnNameSetReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type SetNameReq struct {
	Opts *TransactOpts `protobuf:"bytes,1,opt,name=opts" json:"opts,omitempty"`
	Name string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *SetNameReq) Reset()                    { *m = SetNameReq{} }
func (m *SetNameReq) String() string            { return proto.CompactTextString(m) }
func (*SetNameReq) ProtoMessage()               {}
func (*SetNameReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SetNameReq) GetOpts() *TransactOpts {
	if m != nil {
		return m.Opts
	}
	return nil
}

func (m *SetNameReq) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type TransactOpts struct {
	PrivateKey string `protobuf:"bytes,1,opt,name=private_key,json=privateKey" json:"private_key,omitempty"`
	Nonce      int64  `protobuf:"varint,2,opt,name=nonce" json:"nonce,omitempty"`
	Value      int64  `protobuf:"varint,3,opt,name=value" json:"value,omitempty"`
	GasPrice   int64  `protobuf:"varint,4,opt,name=gas_price,json=gasPrice" json:"gas_price,omitempty"`
	GasLimit   int64  `protobuf:"varint,5,opt,name=gas_limit,json=gasLimit" json:"gas_limit,omitempty"`
}

func (m *TransactOpts) Reset()                    { *m = TransactOpts{} }
func (m *TransactOpts) String() string            { return proto.CompactTextString(m) }
func (*TransactOpts) ProtoMessage()               {}
func (*TransactOpts) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TransactOpts) GetPrivateKey() string {
	if m != nil {
		return m.PrivateKey
	}
	return ""
}

func (m *TransactOpts) GetNonce() int64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *TransactOpts) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *TransactOpts) GetGasPrice() int64 {
	if m != nil {
		return m.GasPrice
	}
	return 0
}

func (m *TransactOpts) GetGasLimit() int64 {
	if m != nil {
		return m.GasLimit
	}
	return 0
}

type TransactionResp struct {
	Hash string `protobuf:"bytes,1,opt,name=hash" json:"hash,omitempty"`
}

func (m *TransactionResp) Reset()                    { *m = TransactionResp{} }
func (m *TransactionResp) String() string            { return proto.CompactTextString(m) }
func (*TransactionResp) ProtoMessage()               {}
func (*TransactionResp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TransactionResp) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*EmptyReq)(nil), "name_service.EmptyReq")
	proto.RegisterType((*GetNameResp)(nil), "name_service.GetNameResp")
	proto.RegisterType((*OnNameSetReq)(nil), "name_service.OnNameSetReq")
	proto.RegisterType((*SetNameReq)(nil), "name_service.SetNameReq")
	proto.RegisterType((*TransactOpts)(nil), "name_service.TransactOpts")
	proto.RegisterType((*TransactionResp)(nil), "name_service.TransactionResp")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for NameService service

type NameServiceClient interface {
	GetName(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetNameResp, error)
	SetName(ctx context.Context, in *SetNameReq, opts ...grpc.CallOption) (*TransactionResp, error)
}

type nameServiceClient struct {
	cc *grpc.ClientConn
}

func NewNameServiceClient(cc *grpc.ClientConn) NameServiceClient {
	return &nameServiceClient{cc}
}

func (c *nameServiceClient) GetName(ctx context.Context, in *EmptyReq, opts ...grpc.CallOption) (*GetNameResp, error) {
	out := new(GetNameResp)
	err := grpc.Invoke(ctx, "/name_service.NameService/getName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nameServiceClient) SetName(ctx context.Context, in *SetNameReq, opts ...grpc.CallOption) (*TransactionResp, error) {
	out := new(TransactionResp)
	err := grpc.Invoke(ctx, "/name_service.NameService/setName", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for NameService service

type NameServiceServer interface {
	GetName(context.Context, *EmptyReq) (*GetNameResp, error)
	SetName(context.Context, *SetNameReq) (*TransactionResp, error)
}

func RegisterNameServiceServer(s *grpc.Server, srv NameServiceServer) {
	s.RegisterService(&_NameService_serviceDesc, srv)
}

func _NameService_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/name_service.NameService/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).GetName(ctx, req.(*EmptyReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _NameService_SetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetNameReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NameServiceServer).SetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/name_service.NameService/SetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NameServiceServer).SetName(ctx, req.(*SetNameReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _NameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "name_service.NameService",
	HandlerType: (*NameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getName",
			Handler:    _NameService_GetName_Handler,
		},
		{
			MethodName: "setName",
			Handler:    _NameService_SetName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contracts/name_service/name_service.proto",
}

func init() { proto.RegisterFile("contracts/name_service/name_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 324 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x52, 0x4f, 0x4b, 0xfb, 0x40,
	0x10, 0x6d, 0x7e, 0x4d, 0x7f, 0x6d, 0x27, 0x05, 0x65, 0x10, 0x89, 0x15, 0xa9, 0x2c, 0x08, 0x7a,
	0xa9, 0x50, 0xef, 0x9e, 0x14, 0x0f, 0x8a, 0x2d, 0xa9, 0xf7, 0xb2, 0x86, 0x21, 0x0d, 0x36, 0xbb,
	0xdb, 0xdd, 0xb5, 0xd0, 0xcf, 0x21, 0x7e, 0x5f, 0xd9, 0x4d, 0x52, 0x13, 0xf0, 0x36, 0xef, 0x4f,
	0x5e, 0x26, 0x6f, 0x02, 0x37, 0xa9, 0x14, 0x56, 0xf3, 0xd4, 0x9a, 0x5b, 0xc1, 0x0b, 0x5a, 0x19,
	0xd2, 0xbb, 0x3c, 0xa5, 0x16, 0x98, 0x2a, 0x2d, 0xad, 0xc4, 0x51, 0x93, 0x63, 0x00, 0x83, 0xc7,
	0x42, 0xd9, 0x7d, 0x42, 0x5b, 0x36, 0x81, 0xe8, 0x89, 0xec, 0x2b, 0x2f, 0x28, 0x21, 0xa3, 0xf0,
	0x18, 0xba, 0x5c, 0x67, 0x71, 0x70, 0x19, 0x5c, 0x0f, 0x13, 0x37, 0x32, 0x06, 0xa3, 0xb9, 0x70,
	0xfa, 0x92, 0x6c, 0x42, 0x5b, 0x44, 0x08, 0x5d, 0x58, 0x65, 0xf1, 0x33, 0x5b, 0x00, 0x2c, 0xeb,
	0x90, 0x2d, 0x4e, 0x21, 0x94, 0xca, 0x1a, 0xef, 0x88, 0x66, 0xe3, 0x69, 0x6b, 0x9f, 0x37, 0xcd,
	0x85, 0xe1, 0xa9, 0x9d, 0x2b, 0x6b, 0x12, 0xef, 0x3b, 0x24, 0xfe, 0x6b, 0x24, 0x7e, 0x07, 0x30,
	0x6a, 0x5a, 0x71, 0x02, 0x91, 0xd2, 0xf9, 0x8e, 0x5b, 0x5a, 0x7d, 0xd0, 0xbe, 0x7a, 0x3b, 0x54,
	0xd4, 0x33, 0xed, 0xf1, 0x04, 0x7a, 0x42, 0x8a, 0xb4, 0x8c, 0xe9, 0x26, 0x25, 0x70, 0xec, 0x8e,
	0x6f, 0x3e, 0x29, 0xee, 0x96, 0xac, 0x07, 0x78, 0x0e, 0xc3, 0x8c, 0x9b, 0x95, 0xd2, 0x79, 0x4a,
	0x71, 0xe8, 0x95, 0x41, 0xc6, 0xcd, 0xc2, 0xe1, 0x5a, 0xdc, 0xe4, 0x45, 0x6e, 0xe3, 0xde, 0x41,
	0x7c, 0x71, 0x98, 0x5d, 0xc1, 0x51, 0xbd, 0x56, 0x2e, 0x85, 0xaf, 0x0c, 0x21, 0x5c, 0x73, 0xb3,
	0xae, 0x0b, 0x71, 0xf3, 0xec, 0x2b, 0x80, 0xa8, 0xec, 0xcc, 0x7f, 0x35, 0xde, 0x43, 0x3f, 0x2b,
	0x0b, 0xc2, 0xd3, 0x76, 0x1f, 0xf5, 0x21, 0xc6, 0x67, 0x6d, 0xbe, 0x71, 0x14, 0xd6, 0xc1, 0x07,
	0xe8, 0x9b, 0xea, 0xf9, 0xb8, 0xed, 0xfb, 0xed, 0x7d, 0x7c, 0xf1, 0x77, 0xd3, 0xd5, 0x9e, 0xac,
	0xf3, 0xfe, 0xdf, 0xff, 0x0c, 0x77, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x43, 0x08, 0x9f, 0x60,
	0x39, 0x02, 0x00, 0x00,
}
